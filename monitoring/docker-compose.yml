version: '3.8'

services:
  # Prometheus: The metrics database
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    restart: unless-stopped
    network_mode: host

  # Node Exporter: The agent that collects host metrics
  node_exporter:
    image: prom/node-exporter:latest
    container_name: node_exporter
    ports:
      - "9100:9100"
    # To monitor the host system, we need to mount host directories
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--path.rootfs=/rootfs'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    restart: unless-stopped
    network_mode: host

  # Grafana: The visualization dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3333:3333"
    volumes:
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SERVER_HTTP_PORT=3333
    restart: unless-stopped
    network_mode: host

volumes:
  prometheus_data: {}
  grafana_data: {}




# services:
#   my-awesome-app:
#     image: traefik/whoami
#     container_name: awesome_app_new
#     networks:
#       - dokploy-network
#     labels:
#       - "traefik.enable=true"
#       - "traefik.docker.network=dokploy-network"

#       # --- 1. Middleware Definition: For redirecting HTTP to HTTPS ---
#       # This creates a reusable middleware named 'https-redirect'
#       - "traefik.http.middlewares.https-redirect.redirectscheme.scheme=https"
#       - "traefik.http.middlewares.https-redirect.redirectscheme.permanent=true"

#       # --- 2. Insecure Router: For HTTP traffic on port 80 ---
#       # This router's only job is to catch HTTP traffic and apply the redirect middleware.
#       - "traefik.http.routers.whoami-http.rule=Host(`whoaminew.adrz.dev`)"
#       - "traefik.http.routers.whoami-http.entrypoints=web"
#       - "traefik.http.routers.whoami-http.middlewares=https-redirect@docker"

#       # --- 3. Secure Router: For HTTPS traffic on port 443 ---
#       # This is your main router that serves the application content.
#       - "traefik.http.routers.whoami-secure.rule=Host(`whoaminew.adrz.dev`)"
#       - "traefik.http.routers.whoami-secure.entrypoints=websecure"
#       - "traefik.http.routers.whoami-secure.tls=true"
#       # Note: We still don't need 'tls.certresolver' because of your traefik.yml default.

# networks:
#   dokploy-network:
#     external: true
